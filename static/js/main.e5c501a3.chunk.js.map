{"version":3,"sources":["components/courselist.js","components/cousreform.js","App.js","serviceWorker.js","index.js"],"names":["CourseList","state","isEdit","renderCourse","className","props","det","name","onClick","toggleState","deleteCourse","index","setState","updateCourseItem","e","preventDefault","editCourse","input","value","renderUpdateForm","onSubmit","type","ref","v","defaultValue","this","Fragment","Component","CourseForm","SubmitHandler","required","current","onChange","onChangeHandler","App","courses","target","push","splice","courseList","map","course","key","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOA4CeA,G,iNAzCXC,MAAQ,CACJC,QAAS,G,EAEbC,aAAe,WACX,OACI,wBAAIC,UAAU,eACV,8BAAO,EAAKC,MAAMC,IAAIC,MACtB,4BAAQH,UAAU,KAAKI,QAAU,WAAO,EAAKC,gBAA7C,eACA,4BAAQL,UAAU,MAAMI,QAAS,WAAO,EAAKH,MAAMK,aAAa,EAAKL,MAAMM,SAA3E,mB,EAIZF,YAAc,WAAO,IACZP,EAAU,EAAKD,MAAfC,OACL,EAAKU,SAAU,CACXV,QAASA,K,EAGjBW,iBAAmB,SAACC,GAChBA,EAAEC,iBACF,EAAKV,MAAMW,WAAW,EAAKX,MAAMM,MAAQ,EAAKM,MAAMC,OACpD,EAAKT,e,EAETU,iBAAmB,WACf,OACI,0BAAMf,UAAU,UAAUgB,SAAW,EAAKP,kBACtC,2BAAOQ,KAAK,OAAOC,IAAO,SAACC,GAAO,EAAKN,MAAQM,GAAIC,aAAc,EAAKnB,MAAMC,IAAIC,OAChF,mD,wEAIF,IACDL,EAAUuB,KAAKxB,MAAfC,OACL,OACI,kBAAC,IAAMwB,SAAP,KACKxB,EAASuB,KAAKN,mBAAqBM,KAAKtB,oB,GApChCwB,cCUVC,EAVI,SAACvB,GAEZ,OACI,0BAAMD,UAAU,UAAUgB,SAAUf,EAAMwB,eACtC,2BAAOC,UAAQ,EAACT,KAAK,OAAOH,MAAOb,EAAM0B,QAASC,SAAU3B,EAAM4B,kBAClE,4BAAQZ,KAAK,UAAb,gBCoDDa,E,2MArDbjC,MAAQ,CACNkC,QAAS,CACP,CAAC5B,KAAM,QACP,CAACA,KAAM,OACP,CAACA,KAAM,eAETwB,QAAS,I,EAEbE,gBAAkB,SAACnB,GACjB,EAAKF,SAAS,CACZmB,QAASjB,EAAEsB,OAAOlB,S,EAGtBW,cAAgB,SAACf,GACfA,EAAEC,iBACF,IAAIoB,EAAU,EAAKlC,MAAMkC,QACrBJ,EAAU,EAAK9B,MAAM8B,QACzBI,EAAQE,KAAK,CAAC9B,KAAMwB,IACpB,EAAKnB,SAAU,CACbuB,UACAJ,QAAS,M,EAGbrB,aAAe,SAACC,GACd,IAAIwB,EAAU,EAAKlC,MAAMkC,QACzBA,EAAQG,OAAO3B,EAAO,GACtB,EAAKC,SAAU,CACbuB,a,EAGJnB,WAAa,SAACL,EAAOO,GAAW,IACzBiB,EAAW,EAAKlC,MAAhBkC,QACQA,EAAQxB,GACf,KAAWO,EACjB,EAAKN,SAAU,CACbuB,a,wEAGO,IAAD,OAEFI,EADYd,KAAKxB,MAAhBkC,QACoBK,KAAK,SAACC,EAAQ9B,GACvC,OAAO,kBAAC,EAAD,CAAYL,IAAKmC,EAAQC,IAAK/B,EAAOD,aAAc,EAAKA,aAAcC,MAAOA,EAAOK,WAAY,EAAKA,gBAE9G,OACE,yBAAKZ,UAAU,OACb,+CACA,kBAAC,EAAD,CAAY6B,gBAAmBR,KAAKQ,gBAAiBJ,cAAiBJ,KAAKI,cAAeE,QAAWN,KAAKxB,MAAM8B,QAASrB,aAAgBe,KAAKf,eAC5Ie,KAAKxB,MAAMkC,QAAQQ,OAAU,EAAIJ,EAAa,+D,GAhDpCZ,aCOEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e5c501a3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass CourseList extends Component {\r\n    state = {\r\n        isEdit : false\r\n    }\r\n    renderCourse = () => {\r\n        return (\r\n            <li className=\"course-item\">\r\n                <span>{this.props.det.name}</span>\r\n                <button className='ed' onClick= {() => {this.toggleState()}}>Edit Course</button>\r\n                <button className='del' onClick={() => {this.props.deleteCourse(this.props.index)}}>Delete Course</button>\r\n            </li>\r\n        )\r\n    }\r\n    toggleState = () => {\r\n        let {isEdit} = this.state;\r\n        this.setState ({\r\n            isEdit: !isEdit\r\n        })\r\n    }\r\n    updateCourseItem = (e) => {\r\n        e.preventDefault();\r\n        this.props.editCourse(this.props.index , this.input.value);\r\n        this.toggleState();\r\n    }\r\n    renderUpdateForm = () => {\r\n        return (\r\n            <form className='updated' onSubmit= {this.updateCourseItem}>\r\n                <input type=\"text\" ref = {(v) => {this.input = v}} defaultValue={this.props.det.name}/>\r\n                <button>Update Course</button>\r\n            </form>\r\n        )\r\n    }\r\n    render() {\r\n        let {isEdit} = this.state\r\n        return(\r\n            <React.Fragment>\r\n                {isEdit ? this.renderUpdateForm() : this.renderCourse()}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CourseList;","import React from 'react';\r\n\r\nconst CourseForm = (props) => {\r\n\r\n        return (\r\n            <form className='crs-frm' onSubmit={props.SubmitHandler}> \r\n                <input required type='text' value={props.current} onChange={props.onChangeHandler} />\r\n                <button type='submit'>Add Course</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default CourseForm;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport CourseList from './components/courselist';\nimport CourseForm from './components/cousreform';\n\nclass App extends Component {\n  state = {\n    courses: [\n      {name: 'HTML'},\n      {name: 'CSS'},\n      {name: 'JavaScript'}\n    ],\n    current: ''\n  }\nonChangeHandler = (e) => {\n  this.setState({\n    current: e.target.value\n  })\n}\nSubmitHandler = (e) => {\n  e.preventDefault();\n  let courses = this.state.courses;\n  let current = this.state.current;\n  courses.push({name: current});\n  this.setState ({\n    courses,\n    current: ''\n  })\n}\ndeleteCourse = (index) => {\n  let courses = this.state.courses;\n  courses.splice(index, 1)\n  this.setState ({\n    courses\n  })\n}\neditCourse = (index, value) => {\n  let {courses} = this.state;\n  let course = courses[index];\n  course['name'] = value;\n  this.setState ({\n    courses\n  })\n}\nrender () {\n  const {courses} = this.state;\n  const courseList = courses.map( (course, index) => {\n    return <CourseList det={course} key={index} deleteCourse={this.deleteCourse} index={index} editCourse={this.editCourse}/>\n  })\n  return (\n    <div className=\"App\">\n      <h2>Course List App</h2>\n      <CourseForm onChangeHandler = {this.onChangeHandler} SubmitHandler = {this.SubmitHandler} current = {this.state.current} deleteCourse = {this.deleteCourse}/>\n      { this.state.courses.length  > 0 ? courseList : <p>There Is No Courses To Show</p> }\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}